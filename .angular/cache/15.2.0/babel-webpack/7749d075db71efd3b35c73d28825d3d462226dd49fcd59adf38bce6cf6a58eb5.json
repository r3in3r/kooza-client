{"ast":null,"code":"import { __decorate } from \"tslib\";\n// src/app/retailers/retailers.component.ts\nimport { Component } from '@angular/core';\nlet RetailersComponent = class RetailersComponent {\n  constructor(dataService) {\n    this.dataService = dataService;\n    this.data = [];\n    this.displayedData = [];\n    this.currentPage = 1;\n    this.itemsPerPage = 50;\n  }\n  ngOnInit() {\n    this.dataService.getData().subscribe(response => {\n      this.data = response.data.map(server => ({\n        name: server.attributes.name,\n        players: server.attributes.players,\n        ip: server.attributes.ip,\n        port: server.attributes.port,\n        map: server.attributes.details.map,\n        country: server.attributes.country.toLowerCase(),\n        status: server.attributes.status\n      }));\n      this.updateDisplayedData();\n    });\n  }\n  updateDisplayedData() {\n    const startIndex = (this.currentPage - 1) * this.itemsPerPage;\n    const endIndex = startIndex + this.itemsPerPage;\n    this.displayedData = this.data.slice(startIndex, endIndex);\n  }\n  nextPage() {\n    if (this.currentPage < this.getTotalPages()) {\n      this.currentPage++;\n      this.updateDisplayedData();\n    }\n  }\n  previousPage() {\n    if (this.currentPage > 1) {\n      this.currentPage--;\n      this.updateDisplayedData();\n    }\n  }\n  getTotalPages() {\n    return Math.ceil(this.data.length / this.itemsPerPage);\n  }\n  joinServer(ip, port) {\n    const steamConnectUrl = `steam://connect/${ip}:${port}`;\n    window.location.href = steamConnectUrl;\n  }\n};\nRetailersComponent = __decorate([Component({\n  selector: 'app-retailers',\n  templateUrl: './retailers.component.html',\n  styleUrls: ['./retailers.component.scss']\n})], RetailersComponent);\nexport { RetailersComponent };","map":{"version":3,"mappings":";AAAA;AACA,SAASA,SAAS,QAAgB,eAAe;AAQ1C,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAM7BC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAL/B,SAAI,GAAU,EAAE;IAChB,kBAAa,GAAU,EAAE;IACzB,gBAAW,GAAW,CAAC;IACvB,iBAAY,GAAW,EAAE;EAEsB;EAE/CC,QAAQ;IACN,IAAI,CAACD,WAAW,CAACE,OAAO,EAAE,CAACC,SAAS,CAACC,QAAQ,IAAG;MAC9C,IAAI,CAACC,IAAI,GAAGD,QAAQ,CAACC,IAAI,CAACC,GAAG,CAAEC,MAAW,KAAM;QAC9CC,IAAI,EAAED,MAAM,CAACE,UAAU,CAACD,IAAI;QAC5BE,OAAO,EAAEH,MAAM,CAACE,UAAU,CAACC,OAAO;QAClCC,EAAE,EAAEJ,MAAM,CAACE,UAAU,CAACE,EAAE;QACxBC,IAAI,EAAEL,MAAM,CAACE,UAAU,CAACG,IAAI;QAC5BN,GAAG,EAAEC,MAAM,CAACE,UAAU,CAACI,OAAO,CAACP,GAAG;QAClCQ,OAAO,EAAEP,MAAM,CAACE,UAAU,CAACK,OAAO,CAACC,WAAW,EAAE;QAChDC,MAAM,EAAET,MAAM,CAACE,UAAU,CAACO;OAC3B,CAAC,CAAC;MACH,IAAI,CAACC,mBAAmB,EAAE;IAC5B,CAAC,CAAC;EACJ;EAEAA,mBAAmB;IACjB,MAAMC,UAAU,GAAG,CAAC,IAAI,CAACC,WAAW,GAAG,CAAC,IAAI,IAAI,CAACC,YAAY;IAC7D,MAAMC,QAAQ,GAAGH,UAAU,GAAG,IAAI,CAACE,YAAY;IAC/C,IAAI,CAACE,aAAa,GAAG,IAAI,CAACjB,IAAI,CAACkB,KAAK,CAACL,UAAU,EAAEG,QAAQ,CAAC;EAC5D;EAEAG,QAAQ;IACN,IAAI,IAAI,CAACL,WAAW,GAAG,IAAI,CAACM,aAAa,EAAE,EAAE;MAC3C,IAAI,CAACN,WAAW,EAAE;MAClB,IAAI,CAACF,mBAAmB,EAAE;;EAE9B;EAEAS,YAAY;IACV,IAAI,IAAI,CAACP,WAAW,GAAG,CAAC,EAAE;MACxB,IAAI,CAACA,WAAW,EAAE;MAClB,IAAI,CAACF,mBAAmB,EAAE;;EAE9B;EAEAQ,aAAa;IACX,OAAOE,IAAI,CAACC,IAAI,CAAC,IAAI,CAACvB,IAAI,CAACwB,MAAM,GAAG,IAAI,CAACT,YAAY,CAAC;EACxD;EAEAU,UAAU,CAACnB,EAAU,EAAEC,IAAY;IACjC,MAAMmB,eAAe,GAAG,mBAAmBpB,EAAE,IAAIC,IAAI,EAAE;IACvDoB,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAGH,eAAe;EACxC;CACD;AAnDYjC,kBAAkB,eAL9BD,SAAS,CAAC;EACTsC,QAAQ,EAAE,eAAe;EACzBC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAC,4BAA4B;CACzC,CAAC,GACWvC,kBAAkB,CAmD9B;SAnDYA,kBAAkB","names":["Component","RetailersComponent","constructor","dataService","ngOnInit","getData","subscribe","response","data","map","server","name","attributes","players","ip","port","details","country","toLowerCase","status","updateDisplayedData","startIndex","currentPage","itemsPerPage","endIndex","displayedData","slice","nextPage","getTotalPages","previousPage","Math","ceil","length","joinServer","steamConnectUrl","window","location","href","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["F:\\Stuff\\TeamAkili\\kooza-client\\src\\app\\retailers\\retailers.component.ts"],"sourcesContent":["// src/app/retailers/retailers.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { DataService } from '../data.service';\n\n@Component({\n  selector: 'app-retailers',\n  templateUrl: './retailers.component.html',\n  styleUrls: ['./retailers.component.scss']\n})\nexport class RetailersComponent implements OnInit {\n  data: any[] = [];\n  displayedData: any[] = [];\n  currentPage: number = 1;\n  itemsPerPage: number = 50;\n\n  constructor(private dataService: DataService) {}\n\n  ngOnInit() {\n    this.dataService.getData().subscribe(response => {\n      this.data = response.data.map((server: any) => ({\n        name: server.attributes.name,\n        players: server.attributes.players,\n        ip: server.attributes.ip,\n        port: server.attributes.port,\n        map: server.attributes.details.map,\n        country: server.attributes.country.toLowerCase(), // Ensure country code is lowercase\n        status: server.attributes.status\n      }));\n      this.updateDisplayedData();\n    });\n  }\n\n  updateDisplayedData() {\n    const startIndex = (this.currentPage - 1) * this.itemsPerPage;\n    const endIndex = startIndex + this.itemsPerPage;\n    this.displayedData = this.data.slice(startIndex, endIndex);\n  }\n\n  nextPage() {\n    if (this.currentPage < this.getTotalPages()) {\n      this.currentPage++;\n      this.updateDisplayedData();\n    }\n  }\n\n  previousPage() {\n    if (this.currentPage > 1) {\n      this.currentPage--;\n      this.updateDisplayedData();\n    }\n  }\n\n  getTotalPages() {\n    return Math.ceil(this.data.length / this.itemsPerPage);\n  }\n\n  joinServer(ip: string, port: number): void {\n    const steamConnectUrl = `steam://connect/${ip}:${port}`;\n    window.location.href = steamConnectUrl;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}