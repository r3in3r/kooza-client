{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://api.battlemetrics.com/servers';\n    this.game = 'rust';\n    this.token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6ImJlYWRmMWNmMTNiZmM3NmYiLCJpYXQiOjE3MTc1MjUzNDQsIm5iZiI6MTcxNzUyNTM0NCwiaXNzIjoiaHR0cHM6Ly93d3cuYmF0dGxlbWV0cmljcy5jb20iLCJzdWIiOiJ1cm46dXNlcjo4NjgxMDgifQ.2pYP4c7L8AZO5y9-ZrCQK1CwqqoWTdCkusJduZbLFOg';\n  }\n  getData(page = 1) {\n    const params = new URLSearchParams({\n      'filter[game]': this.game,\n      'page[size]': '50',\n      'page[number]': page.toString(),\n      'filter[status]': 'online',\n      'sort': 'name',\n      'fields[server]': 'name,ip,port,players,country,status,map'\n    });\n    const url = `${this.apiUrl}?${params.toString()}`;\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.token}`);\n    console.log('Request URL:', url); // Log the request URL for debugging\n    return this.http.get(url, {\n      headers\n    }).pipe(map(response => {\n      console.log('API Response:', response); // Log the response for debugging\n      if (response && response.data) {\n        return {\n          data: response.data.map(server => ({\n            name: server.attributes.name,\n            players: server.attributes.players,\n            ip: server.attributes.ip,\n            port: server.attributes.port,\n            map: server.attributes.details.map,\n            country: server.attributes.country.toLowerCase(),\n            status: server.attributes.status\n          })),\n          meta: response.meta // Return meta data for pagination\n        };\n      } else {\n        console.warn('Empty or malformed response:', response);\n        return {\n          data: [],\n          meta: null\n        };\n      }\n    }), catchError(error => {\n      console.error('Error fetching data:', error);\n      return throwError(error);\n    }));\n  }\n  static #_ = this.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;AAKhD,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJhB,WAAM,GAAG,uCAAuC;IAChD,SAAI,GAAG,MAAM;IACb,UAAK,GAAG,yPAAyP;EAElO;EAEvCC,OAAO,CAACC,OAAe,CAAC;IACtB,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC;MACjC,cAAc,EAAE,IAAI,CAACC,IAAI;MACzB,YAAY,EAAE,IAAI;MAClB,cAAc,EAAEH,IAAI,CAACI,QAAQ,EAAE;MAC/B,gBAAgB,EAAE,QAAQ;MAC1B,MAAM,EAAE,MAAM;MACd,gBAAgB,EAAE;KACnB,CAAC;IAEF,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACC,MAAM,IAAIL,MAAM,CAACG,QAAQ,EAAE,EAAE;IACjD,MAAMG,OAAO,GAAG,IAAIf,WAAW,EAAE,CAACgB,GAAG,CAAC,eAAe,EAAE,UAAU,IAAI,CAACC,KAAK,EAAE,CAAC;IAE9EC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEN,GAAG,CAAC,CAAC,CAAC;IAElC,OAAO,IAAI,CAACP,IAAI,CAACc,GAAG,CAAMP,GAAG,EAAE;MAAEE;IAAO,CAAE,CAAC,CAACM,IAAI,CAC9ClB,GAAG,CAACmB,QAAQ,IAAG;MACbJ,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEG,QAAQ,CAAC,CAAC,CAAC;MACxC,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE;QAC7B,OAAO;UACLA,IAAI,EAAED,QAAQ,CAACC,IAAI,CAACpB,GAAG,CAAEqB,MAAW,KAAM;YACxCC,IAAI,EAAED,MAAM,CAACE,UAAU,CAACD,IAAI;YAC5BE,OAAO,EAAEH,MAAM,CAACE,UAAU,CAACC,OAAO;YAClCC,EAAE,EAAEJ,MAAM,CAACE,UAAU,CAACE,EAAE;YACxBC,IAAI,EAAEL,MAAM,CAACE,UAAU,CAACG,IAAI;YAC5B1B,GAAG,EAAEqB,MAAM,CAACE,UAAU,CAACI,OAAO,CAAC3B,GAAG;YAClC4B,OAAO,EAAEP,MAAM,CAACE,UAAU,CAACK,OAAO,CAACC,WAAW,EAAE;YAChDC,MAAM,EAAET,MAAM,CAACE,UAAU,CAACO;WAC3B,CAAC,CAAC;UACHC,IAAI,EAAEZ,QAAQ,CAACY,IAAI,CAAC;SACrB;OACF,MAAM;QACLhB,OAAO,CAACiB,IAAI,CAAC,8BAA8B,EAAEb,QAAQ,CAAC;QACtD,OAAO;UAAEC,IAAI,EAAE,EAAE;UAAEW,IAAI,EAAE;QAAI,CAAE;;IAEnC,CAAC,CAAC,EACFhC,UAAU,CAACkC,KAAK,IAAG;MACjBlB,OAAO,CAACkB,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAOnC,UAAU,CAACmC,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACH;EAAC;qBAhDUhC,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAiC,SAAXjC,WAAW;IAAAkC,YAFV;EAAM","names":["HttpHeaders","throwError","catchError","map","DataService","constructor","http","getData","page","params","URLSearchParams","game","toString","url","apiUrl","headers","set","token","console","log","get","pipe","response","data","server","name","attributes","players","ip","port","details","country","toLowerCase","status","meta","warn","error","factory","providedIn"],"sourceRoot":"","sources":["E:\\GBrowser\\gbrowser-batlemetrics\\src\\app\\data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  private apiUrl = 'https://api.battlemetrics.com/servers';\n  private game = 'rust';\n  private token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6ImJlYWRmMWNmMTNiZmM3NmYiLCJpYXQiOjE3MTc1MjUzNDQsIm5iZiI6MTcxNzUyNTM0NCwiaXNzIjoiaHR0cHM6Ly93d3cuYmF0dGxlbWV0cmljcy5jb20iLCJzdWIiOiJ1cm46dXNlcjo4NjgxMDgifQ.2pYP4c7L8AZO5y9-ZrCQK1CwqqoWTdCkusJduZbLFOg';\n\n  constructor(private http: HttpClient) {}\n\n  getData(page: number = 1): Observable<any> {\n    const params = new URLSearchParams({\n      'filter[game]': this.game,\n      'page[size]': '50',\n      'page[number]': page.toString(),\n      'filter[status]': 'online',\n      'sort': 'name',\n      'fields[server]': 'name,ip,port,players,country,status,map'\n    });\n\n    const url = `${this.apiUrl}?${params.toString()}`;\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.token}`);\n\n    console.log('Request URL:', url); // Log the request URL for debugging\n\n    return this.http.get<any>(url, { headers }).pipe(\n      map(response => {\n        console.log('API Response:', response); // Log the response for debugging\n        if (response && response.data) {\n          return {\n            data: response.data.map((server: any) => ({\n              name: server.attributes.name,\n              players: server.attributes.players,\n              ip: server.attributes.ip,\n              port: server.attributes.port,\n              map: server.attributes.details.map,\n              country: server.attributes.country.toLowerCase(), // Ensure country code is lowercase\n              status: server.attributes.status\n            })),\n            meta: response.meta // Return meta data for pagination\n          };\n        } else {\n          console.warn('Empty or malformed response:', response);\n          return { data: [], meta: null };\n        }\n      }),\n      catchError(error => {\n        console.error('Error fetching data:', error);\n        return throwError(error);\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}