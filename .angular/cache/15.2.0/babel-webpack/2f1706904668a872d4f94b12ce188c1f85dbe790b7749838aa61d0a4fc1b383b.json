{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../data.service\";\nexport class GameServerListComponent {\n  constructor(dataService) {\n    this.dataService = dataService;\n    this.allData = [];\n    this.displayData = [];\n    this.filteredData = [];\n    this.searchTerm = '';\n    this.pageSize = 50;\n    this.currentPage = 1;\n    this.totalItems = 0;\n    this.nextPageKey = null;\n    this.prevPageKey = null;\n  }\n  ngOnInit() {\n    this.loadData();\n  }\n  loadData(pageKey) {\n    this.dataService.getData(pageKey).subscribe(response => {\n      console.log('Response from data service:', response);\n      if (response.data.length === 0) {\n        console.warn('The response is empty.');\n      }\n      this.allData = response.data.map(server => ({\n        name: server.attributes.name,\n        players: server.attributes.players,\n        ip: server.attributes.ip,\n        port: server.attributes.port,\n        map: server.attributes.details.map,\n        appId: server.attributes.details.appId,\n        country: server.attributes.country.toLowerCase(),\n        status: server.attributes.status\n      }));\n      this.totalItems = response.meta?.total || 0;\n      this.nextPageKey = response.links?.next?.split('page[key]=')[1] || null;\n      this.prevPageKey = response.links?.prev?.split('page[key]=')[1] || null;\n      this.updateDisplayData();\n      console.log('Processed data:', this.allData);\n    }, error => {\n      console.error('Error fetching data:', error);\n    });\n  }\n  updateDisplayData() {\n    const startIndex = (this.currentPage - 1) * this.pageSize;\n    this.displayData = this.allData.slice(startIndex, startIndex + this.pageSize);\n    this.filteredData = this.displayData;\n  }\n  onNextPage() {\n    if (this.currentPage * this.pageSize < this.allData.length) {\n      this.currentPage++;\n      this.updateDisplayData();\n    } else if (this.nextPageKey) {\n      this.loadData(this.nextPageKey);\n      this.currentPage = 1;\n    }\n  }\n  onPrevPage() {\n    if (this.currentPage > 1) {\n      this.currentPage--;\n      this.updateDisplayData();\n    } else if (this.prevPageKey) {\n      this.loadData(this.prevPageKey);\n      this.currentPage = 2;\n    }\n  }\n  joinServer(ip, port) {\n    const steamConnectUrl = `steam://connect/${ip}:${port}`;\n    console.log('Connecting to:', steamConnectUrl);\n    window.location.href = steamConnectUrl;\n  }\n  onSearchChange(event) {\n    const inputElement = event.target;\n    if (inputElement) {\n      this.searchTerm = inputElement.value;\n      this.filteredData = this.displayData.filter(server => server.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\n    }\n  }\n  getMaxDisplayed() {\n    return Math.min(this.currentPage * this.pageSize, this.totalItems);\n  }\n  static #_ = this.ɵfac = function GameServerListComponent_Factory(t) {\n    return new (t || GameServerListComponent)(i0.ɵɵdirectiveInject(i1.DataService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: GameServerListComponent,\n    selectors: [[\"app-game-server-list\"]],\n    decls: 0,\n    vars: 0,\n    template: function GameServerListComponent_Template(rf, ctx) {},\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJnYW1lLXNlcnZlci1saXN0LmNvbXBvbmVudC5zY3NzIn0= */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZ2FtZS1zZXJ2ZXItbGlzdC9nYW1lLXNlcnZlci1saXN0LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxnTEFBZ0wiLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["GameServerListComponent","constructor","dataService","ngOnInit","loadData","pageKey","getData","subscribe","response","console","log","data","length","warn","allData","map","server","name","attributes","players","ip","port","details","appId","country","toLowerCase","status","totalItems","meta","total","nextPageKey","links","next","split","prevPageKey","prev","updateDisplayData","error","startIndex","currentPage","pageSize","displayData","slice","filteredData","onNextPage","onPrevPage","joinServer","steamConnectUrl","window","location","href","onSearchChange","event","inputElement","target","searchTerm","value","filter","includes","getMaxDisplayed","Math","min","selectors","decls","vars","template","styles"],"sourceRoot":"","sources":["E:\\GBrowser\\gbrowser-batlemetrics\\src\\app\\game-server-list\\game-server-list.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { DataService } from '../data.service';\n\n@Component({\n  selector: 'app-game-server-list',\n  templateUrl: './game-server-list.component.html',\n  styleUrls: ['./game-server-list.component.scss']\n})\nexport class GameServerListComponent implements OnInit {\n  allData: any[] = [];\n  displayData: any[] = [];\n  filteredData: any[] = [];\n  searchTerm: string = '';\n  pageSize = 50;\n  currentPage = 1;\n  totalItems = 0;\n  nextPageKey: string | null = null;\n  prevPageKey: string | null = null;\n\n  constructor(private dataService: DataService) {}\n\n  ngOnInit() {\n    this.loadData();\n  }\n\n  loadData(pageKey?: string) {\n    this.dataService.getData(pageKey).subscribe(\n      response => {\n        console.log('Response from data service:', response);\n        if (response.data.length === 0) {\n          console.warn('The response is empty.');\n        }\n        this.allData = response.data.map((server: any) => ({\n          name: server.attributes.name,\n          players: server.attributes.players,\n          ip: server.attributes.ip,\n          port: server.attributes.port,\n          map: server.attributes.details.map,\n          appId: server.attributes.details.appId,\n          country: server.attributes.country.toLowerCase(),\n          status: server.attributes.status\n        }));\n        this.totalItems = response.meta?.total || 0;\n        this.nextPageKey = response.links?.next?.split('page[key]=')[1] || null;\n        this.prevPageKey = response.links?.prev?.split('page[key]=')[1] || null;\n        this.updateDisplayData();\n        console.log('Processed data:', this.allData);\n      },\n      error => {\n        console.error('Error fetching data:', error);\n      }\n    );\n  }\n\n  updateDisplayData() {\n    const startIndex = (this.currentPage - 1) * this.pageSize;\n    this.displayData = this.allData.slice(startIndex, startIndex + this.pageSize);\n    this.filteredData = this.displayData;\n  }\n\n  onNextPage() {\n    if (this.currentPage * this.pageSize < this.allData.length) {\n      this.currentPage++;\n      this.updateDisplayData();\n    } else if (this.nextPageKey) {\n      this.loadData(this.nextPageKey);\n      this.currentPage = 1;\n    }\n  }\n\n  onPrevPage() {\n    if (this.currentPage > 1) {\n      this.currentPage--;\n      this.updateDisplayData();\n    } else if (this.prevPageKey) {\n      this.loadData(this.prevPageKey);\n      this.currentPage = 2;\n    }\n  }\n\n  joinServer(ip: string, port: number): void {\n    const steamConnectUrl = `steam://connect/${ip}:${port}`;\n    console.log('Connecting to:', steamConnectUrl);\n    window.location.href = steamConnectUrl;\n  }\n\n  onSearchChange(event: Event): void {\n    const inputElement = event.target as HTMLInputElement;\n    if (inputElement) {\n      this.searchTerm = inputElement.value;\n      this.filteredData = this.displayData.filter(server =>\n        server.name.toLowerCase().includes(this.searchTerm.toLowerCase())\n      );\n    }\n  }\n  getMaxDisplayed(): number {\n    return Math.min(this.currentPage * this.pageSize, this.totalItems);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}