{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { forkJoin, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://api.battlemetrics.com/servers';\n    this.game = 'rust';\n    this.token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6ImJlYWRmMWNmMTNiZmM3NmYiLCJpYXQiOjE3MTc1MjUzNDQsIm5iZiI6MTcxNzUyNTM0NCwiaXNzIjoiaHR0cHM6Ly93d3cuYmF0dGxlbWV0cmljcy5jb20iLCJzdWIiOiJ1cm46dXNlcjo4NjgxMDgifQ.2pYP4c7L8AZO5y9-ZrCQK1CwqqoWTdCkusJduZbLFOg';\n  }\n  getData() {\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.token}`);\n    const requests = [];\n    for (let page = 1; page <= 5; page++) {\n      const url = `${this.apiUrl}?filter[game]=${encodeURIComponent(this.game)}&page[size]=100&page[number]=${page}`;\n      console.log('Request URL:', url); // Log the request URL for debugging\n      requests.push(this.http.get(url, {\n        headers\n      }).pipe(map(response => {\n        console.log('API Response:', response); // Log the response for debugging\n        if (response && response.data) {\n          return response.data;\n        } else {\n          console.warn('Empty or malformed response:', response);\n          return [];\n        }\n      }), catchError(error => {\n        console.error('Error fetching data:', error);\n        return of([]); // Return an empty array on error\n      })));\n    }\n\n    return forkJoin(requests).pipe(map(results => results.flat()) // Flatten the array of arrays into a single array\n    );\n  }\n  static #_ = this.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAAqBC,QAAQ,EAAEC,EAAE,QAAQ,MAAM;AAC/C,SAASC,UAAU,EAAEC,GAAG,QAA2B,gBAAgB;;;AAKnE,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJhB,WAAM,GAAG,uCAAuC;IAChD,SAAI,GAAG,MAAM;IACb,UAAK,GAAG,yPAAyP;EAElO;EAEvCC,OAAO;IACL,MAAMC,OAAO,GAAG,IAAIT,WAAW,EAAE,CAACU,GAAG,CAAC,eAAe,EAAE,UAAU,IAAI,CAACC,KAAK,EAAE,CAAC;IAC9E,MAAMC,QAAQ,GAAsB,EAAE;IAEtC,KAAK,IAAIC,IAAI,GAAG,CAAC,EAAEA,IAAI,IAAI,CAAC,EAAEA,IAAI,EAAE,EAAE;MACpC,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACC,MAAM,iBAAiBC,kBAAkB,CAAC,IAAI,CAACC,IAAI,CAAC,gCAAgCJ,IAAI,EAAE;MAC9GK,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEL,GAAG,CAAC,CAAC,CAAC;MAClCF,QAAQ,CAACQ,IAAI,CACX,IAAI,CAACb,IAAI,CAACc,GAAG,CAAMP,GAAG,EAAE;QAAEL;MAAO,CAAE,CAAC,CAACa,IAAI,CACvClB,GAAG,CAACmB,QAAQ,IAAG;QACbL,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEI,QAAQ,CAAC,CAAC,CAAC;QACxC,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE;UAC7B,OAAOD,QAAQ,CAACC,IAAI;SACrB,MAAM;UACLN,OAAO,CAACO,IAAI,CAAC,8BAA8B,EAAEF,QAAQ,CAAC;UACtD,OAAO,EAAE;;MAEb,CAAC,CAAC,EACFpB,UAAU,CAACuB,KAAK,IAAG;QACjBR,OAAO,CAACQ,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5C,OAAOxB,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;MACjB,CAAC,CAAC,CACH,CACF;;;IAGH,OAAOD,QAAQ,CAACW,QAAQ,CAAC,CAACU,IAAI,CAC5BlB,GAAG,CAACuB,OAAO,IAAIA,OAAO,CAACC,IAAI,EAAE,CAAC,CAAC;IAAA,CAChC;EACH;EAAC;qBApCUvB,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAwB,SAAXxB,WAAW;IAAAyB,YAFV;EAAM","names":["HttpHeaders","forkJoin","of","catchError","map","DataService","constructor","http","getData","headers","set","token","requests","page","url","apiUrl","encodeURIComponent","game","console","log","push","get","pipe","response","data","warn","error","results","flat","factory","providedIn"],"sourceRoot":"","sources":["E:\\GBrowser\\gbrowser-batlemetrics\\src\\app\\data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, forkJoin, of } from 'rxjs';\nimport { catchError, map, switchMap, reduce } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  private apiUrl = 'https://api.battlemetrics.com/servers';\n  private game = 'rust';\n  private token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6ImJlYWRmMWNmMTNiZmM3NmYiLCJpYXQiOjE3MTc1MjUzNDQsIm5iZiI6MTcxNzUyNTM0NCwiaXNzIjoiaHR0cHM6Ly93d3cuYmF0dGxlbWV0cmljcy5jb20iLCJzdWIiOiJ1cm46dXNlcjo4NjgxMDgifQ.2pYP4c7L8AZO5y9-ZrCQK1CwqqoWTdCkusJduZbLFOg';\n\n  constructor(private http: HttpClient) {}\n\n  getData(): Observable<any[]> {\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.token}`);\n    const requests: Observable<any>[] = [];\n\n    for (let page = 1; page <= 5; page++) {\n      const url = `${this.apiUrl}?filter[game]=${encodeURIComponent(this.game)}&page[size]=100&page[number]=${page}`;\n      console.log('Request URL:', url); // Log the request URL for debugging\n      requests.push(\n        this.http.get<any>(url, { headers }).pipe(\n          map(response => {\n            console.log('API Response:', response); // Log the response for debugging\n            if (response && response.data) {\n              return response.data;\n            } else {\n              console.warn('Empty or malformed response:', response);\n              return [];\n            }\n          }),\n          catchError(error => {\n            console.error('Error fetching data:', error);\n            return of([]); // Return an empty array on error\n          })\n        )\n      );\n    }\n\n    return forkJoin(requests).pipe(\n      map(results => results.flat()) // Flatten the array of arrays into a single array\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}