{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../data.service\";\nexport class GameServerListComponent {\n  constructor(dataService) {\n    this.dataService = dataService;\n    this.data = [];\n    this.filteredData = [];\n    this.searchTerm = '';\n  }\n  ngOnInit() {\n    this.dataService.getData().subscribe(response => {\n      console.log('Response from data service:', response);\n      if (response.length === 0) {\n        console.warn('The response is empty.');\n      }\n      this.data = response.map(server => ({\n        name: server.attributes.name,\n        players: server.attributes.players,\n        ip: server.attributes.ip,\n        port: server.attributes.port,\n        map: server.attributes.details.map,\n        appId: server.attributes.details.appId,\n        country: server.attributes.country.toLowerCase(),\n        status: server.attributes.status\n      }));\n      this.filteredData = this.data; // Initialize filtered data\n      console.log('Processed data:', this.data);\n    }, error => {\n      console.error('Error fetching data:', error);\n    });\n  }\n  joinServer(ip, port) {\n    const steamConnectUrl = `steam://connect/${ip}:${port}`;\n    console.log('Connecting to:', steamConnectUrl);\n    window.location.href = steamConnectUrl;\n  }\n  onSearchChange(event) {\n    const inputElement = event.target;\n    if (inputElement) {\n      this.searchTerm = inputElement.value;\n      this.filteredData = this.data.filter(server => server.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\n    }\n  }\n  static #_ = this.ɵfac = function GameServerListComponent_Factory(t) {\n    return new (t || GameServerListComponent)(i0.ɵɵdirectiveInject(i1.DataService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: GameServerListComponent,\n    selectors: [[\"app-game-server-list\"]],\n    decls: 0,\n    vars: 0,\n    template: function GameServerListComponent_Template(rf, ctx) {},\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJnYW1lLXNlcnZlci1saXN0LmNvbXBvbmVudC5zY3NzIn0= */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZ2FtZS1zZXJ2ZXItbGlzdC9nYW1lLXNlcnZlci1saXN0LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxnTEFBZ0wiLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,uBAAuB;EAKlCC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAJ/B,SAAI,GAAU,EAAE;IAChB,iBAAY,GAAU,EAAE;IACxB,eAAU,GAAW,EAAE;EAEwB;EAE/CC,QAAQ;IACN,IAAI,CAACD,WAAW,CAACE,OAAO,EAAE,CAACC,SAAS,CAClCC,QAAQ,IAAG;MACTC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEF,QAAQ,CAAC;MACpD,IAAIA,QAAQ,CAACG,MAAM,KAAK,CAAC,EAAE;QACzBF,OAAO,CAACG,IAAI,CAAC,wBAAwB,CAAC;;MAExC,IAAI,CAACC,IAAI,GAAGL,QAAQ,CAACM,GAAG,CAAEC,MAAW,KAAM;QACzCC,IAAI,EAAED,MAAM,CAACE,UAAU,CAACD,IAAI;QAC5BE,OAAO,EAAEH,MAAM,CAACE,UAAU,CAACC,OAAO;QAClCC,EAAE,EAAEJ,MAAM,CAACE,UAAU,CAACE,EAAE;QACxBC,IAAI,EAAEL,MAAM,CAACE,UAAU,CAACG,IAAI;QAC5BN,GAAG,EAAEC,MAAM,CAACE,UAAU,CAACI,OAAO,CAACP,GAAG;QAClCQ,KAAK,EAAEP,MAAM,CAACE,UAAU,CAACI,OAAO,CAACC,KAAK;QACtCC,OAAO,EAAER,MAAM,CAACE,UAAU,CAACM,OAAO,CAACC,WAAW,EAAE;QAChDC,MAAM,EAAEV,MAAM,CAACE,UAAU,CAACQ;OAC3B,CAAC,CAAC;MACH,IAAI,CAACC,YAAY,GAAG,IAAI,CAACb,IAAI,CAAC,CAAC;MAC/BJ,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAACG,IAAI,CAAC;IAC3C,CAAC,EACDc,KAAK,IAAG;MACNlB,OAAO,CAACkB,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC,CACF;EACH;EAEAC,UAAU,CAACT,EAAU,EAAEC,IAAY;IACjC,MAAMS,eAAe,GAAG,mBAAmBV,EAAE,IAAIC,IAAI,EAAE;IACvDX,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEmB,eAAe,CAAC;IAC9CC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAGH,eAAe;EACxC;EAEAI,cAAc,CAACC,KAAY;IACzB,MAAMC,YAAY,GAAGD,KAAK,CAACE,MAA0B;IACrD,IAAID,YAAY,EAAE;MAChB,IAAI,CAACE,UAAU,GAAGF,YAAY,CAACG,KAAK;MACpC,IAAI,CAACZ,YAAY,GAAG,IAAI,CAACb,IAAI,CAAC0B,MAAM,CAACxB,MAAM,IAAIA,MAAM,CAACC,IAAI,CAACQ,WAAW,EAAE,CAACgB,QAAQ,CAAC,IAAI,CAACH,UAAU,CAACb,WAAW,EAAE,CAAC,CAAC;;EAErH;EAAC;qBA7CUtB,uBAAuB;EAAA;EAAA;UAAvBA,uBAAuB;IAAAuC;IAAAC;IAAAC;IAAAC;IAAAC;EAAA","names":["GameServerListComponent","constructor","dataService","ngOnInit","getData","subscribe","response","console","log","length","warn","data","map","server","name","attributes","players","ip","port","details","appId","country","toLowerCase","status","filteredData","error","joinServer","steamConnectUrl","window","location","href","onSearchChange","event","inputElement","target","searchTerm","value","filter","includes","selectors","decls","vars","template","styles"],"sourceRoot":"","sources":["E:\\GBrowser\\kooza-client-batlemetrics\\src\\app\\game-server-list\\game-server-list.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { DataService } from '../data.service';\n\n@Component({\n  selector: 'app-game-server-list',\n  templateUrl: './game-server-list.component.html',\n  styleUrls: ['./game-server-list.component.scss']\n})\nexport class GameServerListComponent implements OnInit {\n  data: any[] = [];\n  filteredData: any[] = [];\n  searchTerm: string = '';\n\n  constructor(private dataService: DataService) {}\n\n  ngOnInit() {\n    this.dataService.getData().subscribe(\n      response => {\n        console.log('Response from data service:', response);\n        if (response.length === 0) {\n          console.warn('The response is empty.');\n        }\n        this.data = response.map((server: any) => ({\n          name: server.attributes.name,\n          players: server.attributes.players,\n          ip: server.attributes.ip,\n          port: server.attributes.port,\n          map: server.attributes.details.map,\n          appId: server.attributes.details.appId,\n          country: server.attributes.country.toLowerCase(), // Ensure country code is lowercase\n          status: server.attributes.status\n        }));\n        this.filteredData = this.data; // Initialize filtered data\n        console.log('Processed data:', this.data);\n      },\n      error => {\n        console.error('Error fetching data:', error);\n      }\n    );\n  }\n\n  joinServer(ip: string, port: number): void {\n    const steamConnectUrl = `steam://connect/${ip}:${port}`;\n    console.log('Connecting to:', steamConnectUrl);\n    window.location.href = steamConnectUrl;\n  }\n\n  onSearchChange(event: Event): void {\n    const inputElement = event.target as HTMLInputElement;\n    if (inputElement) {\n      this.searchTerm = inputElement.value;\n      this.filteredData = this.data.filter(server => server.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}