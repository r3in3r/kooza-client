{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError, of } from 'rxjs';\nimport { catchError, map, mergeMap, toArray } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://api.battlemetrics.com/servers?filter[game]=palworld&page[size]=100';\n    this.token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6ImJlYWRmMWNmMTNiZmM3NmYiLCJpYXQiOjE3MTc1MjUzNDQsIm5iZiI6MTcxNzUyNTM0NCwiaXNzIjoiaHR0cHM6Ly93d3cuYmF0dGxlbWV0cmljcy5jb20iLCJzdWIiOiJ1cm46dXNlcjo4NjgxMDgifQ.2pYP4c7L8AZO5y9-ZrCQK1CwqqoWTdCkusJduZbLFOg';\n  }\n  getData() {\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${this.token}`\n    });\n    const totalPages = 10; // 1000 results / 100 results per page\n    const requests = [];\n    for (let page = 1; page <= totalPages; page++) {\n      requests.push(this.http.get(`${this.apiUrl}&page[number]=${page}`, {\n        headers\n      }));\n    }\n    return of(...requests).pipe(mergeMap(req => req), map(response => response.data), toArray(), map(arrays => arrays.flat()),\n    // Flatten the array of arrays\n    catchError(error => {\n      console.error('Error fetching data:', error);\n      return throwError(error);\n    }));\n  }\n  static #_ = this.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAAqBC,UAAU,EAAEC,EAAE,QAAQ,MAAM;AACjD,SAASC,UAAU,EAAEC,GAAG,EAAEC,QAAQ,EAAEC,OAAO,QAAQ,gBAAgB;;;AAKnE,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHhB,WAAM,GAAG,4EAA4E;IACrF,UAAK,GAAG,yPAAyP;EAElO;EAEvCC,OAAO;IACL,MAAMC,OAAO,GAAG,IAAIX,WAAW,CAAC;MAC9B,eAAe,EAAE,UAAU,IAAI,CAACY,KAAK;KACtC,CAAC;IAEF,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;IACvB,MAAMC,QAAQ,GAAG,EAAE;IAEnB,KAAK,IAAIC,IAAI,GAAG,CAAC,EAAEA,IAAI,IAAIF,UAAU,EAAEE,IAAI,EAAE,EAAE;MAC7CD,QAAQ,CAACE,IAAI,CAAC,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAC,GAAG,IAAI,CAACC,MAAM,iBAAiBH,IAAI,EAAE,EAAE;QAAEJ;MAAO,CAAE,CAAC,CAAC;;IAGlF,OAAOT,EAAE,CAAC,GAAGY,QAAQ,CAAC,CAACK,IAAI,CACzBd,QAAQ,CAACe,GAAG,IAAIA,GAAG,CAAC,EACpBhB,GAAG,CAAEiB,QAAa,IAAKA,QAAQ,CAACC,IAAI,CAAC,EACrChB,OAAO,EAAE,EACTF,GAAG,CAACmB,MAAM,IAAIA,MAAM,CAACC,IAAI,EAAE,CAAC;IAAE;IAC9BrB,UAAU,CAACsB,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAOxB,UAAU,CAACwB,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACH;EAAC;qBA5BUlB,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAoB,SAAXpB,WAAW;IAAAqB,YAFV;EAAM","names":["HttpHeaders","throwError","of","catchError","map","mergeMap","toArray","DataService","constructor","http","getData","headers","token","totalPages","requests","page","push","get","apiUrl","pipe","req","response","data","arrays","flat","error","console","factory","providedIn"],"sourceRoot":"","sources":["F:\\Stuff\\TeamAkili\\kooza-client\\src\\app\\data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError, of } from 'rxjs';\nimport { catchError, map, mergeMap, toArray } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  private apiUrl = 'https://api.battlemetrics.com/servers?filter[game]=palworld&page[size]=100';\n  private token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6ImJlYWRmMWNmMTNiZmM3NmYiLCJpYXQiOjE3MTc1MjUzNDQsIm5iZiI6MTcxNzUyNTM0NCwiaXNzIjoiaHR0cHM6Ly93d3cuYmF0dGxlbWV0cmljcy5jb20iLCJzdWIiOiJ1cm46dXNlcjo4NjgxMDgifQ.2pYP4c7L8AZO5y9-ZrCQK1CwqqoWTdCkusJduZbLFOg';\n\n  constructor(private http: HttpClient) {}\n\n  getData(): Observable<any[]> {\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${this.token}`\n    });\n\n    const totalPages = 10; // 1000 results / 100 results per page\n    const requests = [];\n\n    for (let page = 1; page <= totalPages; page++) {\n      requests.push(this.http.get(`${this.apiUrl}&page[number]=${page}`, { headers }));\n    }\n\n    return of(...requests).pipe(\n      mergeMap(req => req),\n      map((response: any) => response.data),\n      toArray(),\n      map(arrays => arrays.flat()), // Flatten the array of arrays\n      catchError(error => {\n        console.error('Error fetching data:', error);\n        return throwError(error);\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}