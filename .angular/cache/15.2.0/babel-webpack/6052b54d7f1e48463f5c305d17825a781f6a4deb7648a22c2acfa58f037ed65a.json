{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, map, expand, reduce } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://api.battlemetrics.com/servers';\n    this.game = 'palworld';\n    this.token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6ImJlYWRmMWNmMTNiZmM3NmYiLCJpYXQiOjE3MTc1MjUzNDQsIm5iZiI6MTcxNzUyNTM0NCwiaXNzIjoiaHR0cHM6Ly93d3cuYmF0dGxlbWV0cmljcy5jb20iLCJzdWIiOiJ1cm46dXNlcjo4NjgxMDgifQ.2pYP4c7L8AZO5y9-ZrCQK1CwqqoWTdCkusJduZbLFOg';\n  }\n  getData() {\n    return this.fetchServers(1, 100).pipe(reduce((acc, curr) => acc.concat(curr), []));\n  }\n  fetchServers(page, size) {\n    const url = `${this.apiUrl}?filter[game]=${this.game}&page[size]=${size}&page[number]=${page}`;\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.token}`);\n    return this.http.get(url, {\n      headers\n    }).pipe(map(response => {\n      if (response && response.data) {\n        return response.data;\n      } else {\n        console.warn('Empty or malformed response:', response);\n        return [];\n      }\n    }), expand((data, index) => data.length === size ? this.fetchServers(page + 1, size) : []), catchError(error => {\n      console.error('Error fetching data:', error);\n      return throwError(error);\n    }));\n  }\n  static #_ = this.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAEA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAQ,gBAAgB;;;AAKhE,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJhB,WAAM,GAAG,uCAAuC;IAChD,SAAI,GAAG,UAAU;IACjB,UAAK,GAAG,yPAAyP;EAElO;EAEvCC,OAAO;IACL,OAAO,IAAI,CAACC,YAAY,CAAC,CAAC,EAAE,GAAG,CAAC,CAACC,IAAI,CACnCN,MAAM,CAAe,CAACO,GAAG,EAAEC,IAAI,KAAKD,GAAG,CAACE,MAAM,CAACD,IAAI,CAAC,EAAE,EAAE,CAAC,CAC1D;EACH;EAEQH,YAAY,CAACK,IAAY,EAAEC,IAAY;IAC7C,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACC,MAAM,iBAAiB,IAAI,CAACC,IAAI,eAAeH,IAAI,iBAAiBD,IAAI,EAAE;IAC9F,MAAMK,OAAO,GAAG,IAAIpB,WAAW,EAAE,CAACqB,GAAG,CAAC,eAAe,EAAE,UAAU,IAAI,CAACC,KAAK,EAAE,CAAC;IAE9E,OAAO,IAAI,CAACd,IAAI,CAACe,GAAG,CAAMN,GAAG,EAAE;MAAEG;IAAO,CAAE,CAAC,CAACT,IAAI,CAC9CR,GAAG,CAACqB,QAAQ,IAAG;MACb,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE;QAC7B,OAAOD,QAAQ,CAACC,IAAI;OACrB,MAAM;QACLC,OAAO,CAACC,IAAI,CAAC,8BAA8B,EAAEH,QAAQ,CAAC;QACtD,OAAO,EAAE;;IAEb,CAAC,CAAC,EACFpB,MAAM,CAAC,CAACqB,IAAI,EAAEG,KAAK,KAAMH,IAAI,CAACI,MAAM,KAAKb,IAAI,GAAG,IAAI,CAACN,YAAY,CAACK,IAAI,GAAG,CAAC,EAAEC,IAAI,CAAC,GAAG,EAAG,CAAC,EACxFd,UAAU,CAAC4B,KAAK,IAAG;MACjBJ,OAAO,CAACI,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAO7B,UAAU,CAAC6B,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACH;EAAC;qBAhCUxB,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAyB,SAAXzB,WAAW;IAAA0B,YAFV;EAAM","names":["HttpHeaders","throwError","catchError","map","expand","reduce","DataService","constructor","http","getData","fetchServers","pipe","acc","curr","concat","page","size","url","apiUrl","game","headers","set","token","get","response","data","console","warn","index","length","error","factory","providedIn"],"sourceRoot":"","sources":["F:\\Stuff\\TeamAkili\\kooza-client Orginal\\src\\app\\data.service.ts"],"sourcesContent":["// src/app/data.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map, expand, reduce } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  private apiUrl = 'https://api.battlemetrics.com/servers';\n  private game = 'palworld';\n  private token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6ImJlYWRmMWNmMTNiZmM3NmYiLCJpYXQiOjE3MTc1MjUzNDQsIm5iZiI6MTcxNzUyNTM0NCwiaXNzIjoiaHR0cHM6Ly93d3cuYmF0dGxlbWV0cmljcy5jb20iLCJzdWIiOiJ1cm46dXNlcjo4NjgxMDgifQ.2pYP4c7L8AZO5y9-ZrCQK1CwqqoWTdCkusJduZbLFOg';\n\n  constructor(private http: HttpClient) {}\n\n  getData(): Observable<any[]> {\n    return this.fetchServers(1, 100).pipe(\n      reduce<any[], any[]>((acc, curr) => acc.concat(curr), [])\n    );\n  }\n\n  private fetchServers(page: number, size: number): Observable<any[]> {\n    const url = `${this.apiUrl}?filter[game]=${this.game}&page[size]=${size}&page[number]=${page}`;\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.token}`);\n\n    return this.http.get<any>(url, { headers }).pipe(\n      map(response => {\n        if (response && response.data) {\n          return response.data;\n        } else {\n          console.warn('Empty or malformed response:', response);\n          return [];\n        }\n      }),\n      expand((data, index) => (data.length === size ? this.fetchServers(page + 1, size) : [])),\n      catchError(error => {\n        console.error('Error fetching data:', error);\n        return throwError(error);\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}