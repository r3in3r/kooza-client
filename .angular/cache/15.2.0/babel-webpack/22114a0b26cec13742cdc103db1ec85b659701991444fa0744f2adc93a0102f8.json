{"ast":null,"code":"import { forkJoin, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://api.example.com/servers'; // Replace with your API URL\n  }\n\n  getData() {\n    // Create an array of Observables for the first 5 pages\n    const requests = [];\n    for (let i = 1; i <= 5; i++) {\n      requests.push(this.http.get(`${this.apiUrl}?page=${i}`).pipe(catchError(error => {\n        console.error(`Error fetching page ${i}:`, error);\n        return throwError(error);\n      })));\n    }\n    // Combine the results of the multiple requests\n    return forkJoin(requests).pipe(map(responses => {\n      console.log('API responses:', responses);\n      const combinedData = responses.reduce((acc, response) => {\n        if (response && response.data) {\n          return acc.concat(response.data);\n        }\n        console.warn('Empty or malformed response:', response);\n        return acc;\n      }, []);\n      console.log('Combined data:', combinedData);\n      return combinedData;\n    }), catchError(error => {\n      console.error('Error combining data:', error);\n      return throwError(error);\n    }));\n  }\n  static #_ = this.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAGA,SAAqBA,QAAQ,EAAEC,UAAU,QAAQ,MAAM;AACvD,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;AAKhD,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,iCAAiC,CAAC,CAAC;EAEb;;EAEvCC,OAAO;IACL;IACA,MAAMC,QAAQ,GAAsB,EAAE;IACtC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC3BD,QAAQ,CAACE,IAAI,CAAC,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAC,GAAG,IAAI,CAACC,MAAM,SAASH,CAAC,EAAE,CAAC,CAACI,IAAI,CAC1DX,UAAU,CAACY,KAAK,IAAG;QACjBC,OAAO,CAACD,KAAK,CAAC,uBAAuBL,CAAC,GAAG,EAAEK,KAAK,CAAC;QACjD,OAAOb,UAAU,CAACa,KAAK,CAAC;MAC1B,CAAC,CAAC,CACH,CAAC;;IAGJ;IACA,OAAOd,QAAQ,CAACQ,QAAQ,CAAC,CAACK,IAAI,CAC5BV,GAAG,CAAEa,SAAgB,IAAI;MACvBD,OAAO,CAACE,GAAG,CAAC,gBAAgB,EAAED,SAAS,CAAC;MACxC,MAAME,YAAY,GAAGF,SAAS,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,QAAQ,KAAI;QACtD,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE;UAC7B,OAAOF,GAAG,CAACG,MAAM,CAACF,QAAQ,CAACC,IAAI,CAAC;;QAElCP,OAAO,CAACS,IAAI,CAAC,8BAA8B,EAAEH,QAAQ,CAAC;QACtD,OAAOD,GAAG;MACZ,CAAC,EAAE,EAAE,CAAC;MACNL,OAAO,CAACE,GAAG,CAAC,gBAAgB,EAAEC,YAAY,CAAC;MAC3C,OAAOA,YAAY;IACrB,CAAC,CAAC,EACFhB,UAAU,CAACY,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,OAAOb,UAAU,CAACa,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACH;EAAC;qBApCUV,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAqB,SAAXrB,WAAW;IAAAsB,YAFV;EAAM","names":["forkJoin","throwError","catchError","map","DataService","constructor","http","getData","requests","i","push","get","apiUrl","pipe","error","console","responses","log","combinedData","reduce","acc","response","data","concat","warn","factory","providedIn"],"sourceRoot":"","sources":["F:\\Stuff\\TeamAkili\\kooza-client\\src\\app\\data.service.ts"],"sourcesContent":["// src/app/data.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, forkJoin, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  private apiUrl = 'https://api.example.com/servers'; // Replace with your API URL\n\n  constructor(private http: HttpClient) {}\n\n  getData(): Observable<any> {\n    // Create an array of Observables for the first 5 pages\n    const requests: Observable<any>[] = [];\n    for (let i = 1; i <= 5; i++) {\n      requests.push(this.http.get(`${this.apiUrl}?page=${i}`).pipe(\n        catchError(error => {\n          console.error(`Error fetching page ${i}:`, error);\n          return throwError(error);\n        })\n      ));\n    }\n\n    // Combine the results of the multiple requests\n    return forkJoin(requests).pipe(\n      map((responses: any[]) => {\n        console.log('API responses:', responses);\n        const combinedData = responses.reduce((acc, response) => {\n          if (response && response.data) {\n            return acc.concat(response.data);\n          }\n          console.warn('Empty or malformed response:', response);\n          return acc;\n        }, []);\n        console.log('Combined data:', combinedData);\n        return combinedData;\n      }),\n      catchError(error => {\n        console.error('Error combining data:', error);\n        return throwError(error);\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}