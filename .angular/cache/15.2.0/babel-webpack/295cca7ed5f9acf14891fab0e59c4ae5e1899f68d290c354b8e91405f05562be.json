{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../data.service\";\nexport class GameServerListComponent {\n  constructor(dataService) {\n    this.dataService = dataService;\n    this.data = [];\n    this.filteredData = [];\n    this.searchTerm = '';\n    this.currentPage = 1;\n  }\n  ngOnInit() {\n    this.fetchData(this.currentPage);\n  }\n  fetchData(page) {\n    this.dataService.getData(page).subscribe(response => {\n      console.log('Response from data service:', response);\n      if (response.length === 0) {\n        console.warn('The response is empty.');\n      }\n      this.data = response;\n      this.filteredData = this.data; // Initialize filtered data\n      console.log('Processed data:', this.data);\n    }, error => {\n      console.error('Error fetching data:', error);\n      alert('Error fetching data. Please check the console for details.');\n    });\n  }\n  joinServer(ip, port) {\n    const steamConnectUrl = `steam://connect/${ip}:${port}`;\n    console.log('Connecting to:', steamConnectUrl);\n    window.location.href = steamConnectUrl;\n  }\n  onSearchChange(event) {\n    const inputElement = event.target;\n    if (inputElement) {\n      this.searchTerm = inputElement.value;\n      this.filteredData = this.data.filter(server => server.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\n    }\n  }\n  nextPage() {\n    this.currentPage++;\n    this.fetchData(this.currentPage);\n  }\n  previousPage() {\n    if (this.currentPage > 1) {\n      this.currentPage--;\n      this.fetchData(this.currentPage);\n    }\n  }\n  static #_ = this.ɵfac = function GameServerListComponent_Factory(t) {\n    return new (t || GameServerListComponent)(i0.ɵɵdirectiveInject(i1.DataService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: GameServerListComponent,\n    selectors: [[\"app-game-server-list\"]],\n    decls: 0,\n    vars: 0,\n    template: function GameServerListComponent_Template(rf, ctx) {},\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJnYW1lLXNlcnZlci1saXN0LmNvbXBvbmVudC5zY3NzIn0= */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZ2FtZS1zZXJ2ZXItbGlzdC9nYW1lLXNlcnZlci1saXN0LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxnTEFBZ0wiLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,uBAAuB;EAMlCC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAL/B,SAAI,GAAU,EAAE;IAChB,iBAAY,GAAU,EAAE;IACxB,eAAU,GAAW,EAAE;IACvB,gBAAW,GAAW,CAAC;EAEwB;EAE/CC,QAAQ;IACN,IAAI,CAACC,SAAS,CAAC,IAAI,CAACC,WAAW,CAAC;EAClC;EAEAD,SAAS,CAACE,IAAY;IACpB,IAAI,CAACJ,WAAW,CAACK,OAAO,CAACD,IAAI,CAAC,CAACE,SAAS,CACtCC,QAAQ,IAAG;MACTC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEF,QAAQ,CAAC;MACpD,IAAIA,QAAQ,CAACG,MAAM,KAAK,CAAC,EAAE;QACzBF,OAAO,CAACG,IAAI,CAAC,wBAAwB,CAAC;;MAExC,IAAI,CAACC,IAAI,GAAGL,QAAQ;MACpB,IAAI,CAACM,YAAY,GAAG,IAAI,CAACD,IAAI,CAAC,CAAC;MAC/BJ,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAACG,IAAI,CAAC;IAC3C,CAAC,EACDE,KAAK,IAAG;MACNN,OAAO,CAACM,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CC,KAAK,CAAC,4DAA4D,CAAC;IACrE,CAAC,CACF;EACH;EAEAC,UAAU,CAACC,EAAU,EAAEC,IAAY;IACjC,MAAMC,eAAe,GAAG,mBAAmBF,EAAE,IAAIC,IAAI,EAAE;IACvDV,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEU,eAAe,CAAC;IAC9CC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAGH,eAAe;EACxC;EAEAI,cAAc,CAACC,KAAY;IACzB,MAAMC,YAAY,GAAGD,KAAK,CAACE,MAA0B;IACrD,IAAID,YAAY,EAAE;MAChB,IAAI,CAACE,UAAU,GAAGF,YAAY,CAACG,KAAK;MACpC,IAAI,CAACf,YAAY,GAAG,IAAI,CAACD,IAAI,CAACiB,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACC,IAAI,CAACC,WAAW,EAAE,CAACC,QAAQ,CAAC,IAAI,CAACN,UAAU,CAACK,WAAW,EAAE,CAAC,CAAC;;EAErH;EAEAE,QAAQ;IACN,IAAI,CAAC/B,WAAW,EAAE;IAClB,IAAI,CAACD,SAAS,CAAC,IAAI,CAACC,WAAW,CAAC;EAClC;EAEAgC,YAAY;IACV,IAAI,IAAI,CAAChC,WAAW,GAAG,CAAC,EAAE;MACxB,IAAI,CAACA,WAAW,EAAE;MAClB,IAAI,CAACD,SAAS,CAAC,IAAI,CAACC,WAAW,CAAC;;EAEpC;EAAC;qBAtDUL,uBAAuB;EAAA;EAAA;UAAvBA,uBAAuB;IAAAsC;IAAAC;IAAAC;IAAAC;IAAAC;EAAA","names":["GameServerListComponent","constructor","dataService","ngOnInit","fetchData","currentPage","page","getData","subscribe","response","console","log","length","warn","data","filteredData","error","alert","joinServer","ip","port","steamConnectUrl","window","location","href","onSearchChange","event","inputElement","target","searchTerm","value","filter","server","name","toLowerCase","includes","nextPage","previousPage","selectors","decls","vars","template","styles"],"sourceRoot":"","sources":["E:\\GBrowser\\gbrowser-batlemetrics\\src\\app\\game-server-list\\game-server-list.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { DataService } from '../data.service';\n\n@Component({\n  selector: 'app-game-server-list',\n  templateUrl: './game-server-list.component.html',\n  styleUrls: ['./game-server-list.component.scss']\n})\nexport class GameServerListComponent implements OnInit {\n  data: any[] = [];\n  filteredData: any[] = [];\n  searchTerm: string = '';\n  currentPage: number = 1;\n\n  constructor(private dataService: DataService) {}\n\n  ngOnInit() {\n    this.fetchData(this.currentPage);\n  }\n\n  fetchData(page: number): void {\n    this.dataService.getData(page).subscribe(\n      response => {\n        console.log('Response from data service:', response);\n        if (response.length === 0) {\n          console.warn('The response is empty.');\n        }\n        this.data = response;\n        this.filteredData = this.data; // Initialize filtered data\n        console.log('Processed data:', this.data);\n      },\n      error => {\n        console.error('Error fetching data:', error);\n        alert('Error fetching data. Please check the console for details.');\n      }\n    );\n  }\n\n  joinServer(ip: string, port: number): void {\n    const steamConnectUrl = `steam://connect/${ip}:${port}`;\n    console.log('Connecting to:', steamConnectUrl);\n    window.location.href = steamConnectUrl;\n  }\n\n  onSearchChange(event: Event): void {\n    const inputElement = event.target as HTMLInputElement;\n    if (inputElement) {\n      this.searchTerm = inputElement.value;\n      this.filteredData = this.data.filter(server => server.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\n    }\n  }\n\n  nextPage(): void {\n    this.currentPage++;\n    this.fetchData(this.currentPage);\n  }\n\n  previousPage(): void {\n    if (this.currentPage > 1) {\n      this.currentPage--;\n      this.fetchData(this.currentPage);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}