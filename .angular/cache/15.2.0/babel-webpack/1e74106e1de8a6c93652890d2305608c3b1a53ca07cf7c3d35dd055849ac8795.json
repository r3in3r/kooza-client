{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { throwError, of } from 'rxjs';\nimport { catchError, map, expand, reduce } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://api.battlemetrics.com/servers';\n    this.game = 'rust';\n    this.token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6ImJlYWRmMWNmMTNiZmM3NmYiLCJpYXQiOjE3MTc1MjUzNDQsIm5iZiI6MTcxNzUyNTM0NCwiaXNzIjoiaHR0cHM6Ly93d3cuYmF0dGxlbWV0cmljcy5jb20iLCJzdWIiOiJ1cm46dXNlcjo4NjgxMDgifQ.2pYP4c7L8AZO5y9-ZrCQK1CwqqoWTdCkusJduZbLFOg';\n  }\n  getAllData() {\n    return this.getDataPage().pipe(expand(response => response.links?.next ? this.getDataPage(response.links.next) : of(null)), reduce((acc, response) => {\n      if (response && response.data) {\n        return [...acc, ...response.data];\n      }\n      return acc;\n    }, []));\n  }\n  getDataPage(pageUrl) {\n    const url = pageUrl || this.apiUrl;\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.token}`);\n    let params = new HttpParams().set('filter[game]', this.game).set('page[size]', '100');\n    if (!pageUrl) {\n      // Only set these params for the initial request\n      params = params.set('sort', 'rank');\n      params = params.set('include', 'serverGroup');\n    }\n    console.log('Request URL:', url);\n    console.log('Request Params:', params.toString());\n    return this.http.get(url, {\n      headers,\n      params: pageUrl ? undefined : params\n    }).pipe(map(response => {\n      console.log('API Response:', response);\n      if (response && response.data) {\n        return response;\n      } else {\n        console.warn('Empty or malformed response:', response);\n        return {\n          data: [],\n          meta: null,\n          links: null\n        };\n      }\n    }), catchError(error => {\n      console.error('Error fetching data:', error);\n      return throwError(error);\n    }));\n  }\n  static #_ = this.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,EAAEC,UAAU,QAAQ,sBAAsB;AAC1E,SAAqBC,UAAU,EAAEC,EAAE,QAAQ,MAAM;AACjD,SAASC,UAAU,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAQ,gBAAgB;;;AAKhE,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJhB,WAAM,GAAG,uCAAuC;IAChD,SAAI,GAAG,MAAM;IACb,UAAK,GAAG,yPAAyP;EAElO;EAEvCC,UAAU;IACR,OAAO,IAAI,CAACC,WAAW,EAAE,CAACC,IAAI,CAC5BP,MAAM,CAACQ,QAAQ,IAAIA,QAAQ,CAACC,KAAK,EAAEC,IAAI,GAAG,IAAI,CAACJ,WAAW,CAACE,QAAQ,CAACC,KAAK,CAACC,IAAI,CAAC,GAAGb,EAAE,CAAC,IAAI,CAAC,CAAC,EAC3FI,MAAM,CAAC,CAACU,GAAG,EAAEH,QAAQ,KAAI;MACvB,IAAIA,QAAQ,IAAIA,QAAQ,CAACI,IAAI,EAAE;QAC7B,OAAO,CAAC,GAAGD,GAAG,EAAE,GAAGH,QAAQ,CAACI,IAAI,CAAC;;MAEnC,OAAOD,GAAG;IACZ,CAAC,EAAE,EAAE,CAAC,CACP;EACH;EAEQL,WAAW,CAACO,OAAgB;IAClC,MAAMC,GAAG,GAAGD,OAAO,IAAI,IAAI,CAACE,MAAM;IAClC,MAAMC,OAAO,GAAG,IAAItB,WAAW,EAAE,CAACuB,GAAG,CAAC,eAAe,EAAE,UAAU,IAAI,CAACC,KAAK,EAAE,CAAC;IAC9E,IAAIC,MAAM,GAAG,IAAIxB,UAAU,EAAE,CAC1BsB,GAAG,CAAC,cAAc,EAAE,IAAI,CAACG,IAAI,CAAC,CAC9BH,GAAG,CAAC,YAAY,EAAE,KAAK,CAAC;IAE3B,IAAI,CAACJ,OAAO,EAAE;MACZ;MACAM,MAAM,GAAGA,MAAM,CAACF,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC;MACnCE,MAAM,GAAGA,MAAM,CAACF,GAAG,CAAC,SAAS,EAAE,aAAa,CAAC;;IAG/CI,OAAO,CAACC,GAAG,CAAC,cAAc,EAAER,GAAG,CAAC;IAChCO,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEH,MAAM,CAACI,QAAQ,EAAE,CAAC;IAEjD,OAAO,IAAI,CAACnB,IAAI,CAACoB,GAAG,CAAMV,GAAG,EAAE;MAAEE,OAAO;MAAEG,MAAM,EAAEN,OAAO,GAAGY,SAAS,GAAGN;IAAM,CAAE,CAAC,CAACZ,IAAI,CACpFR,GAAG,CAACS,QAAQ,IAAG;MACba,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEd,QAAQ,CAAC;MACtC,IAAIA,QAAQ,IAAIA,QAAQ,CAACI,IAAI,EAAE;QAC7B,OAAOJ,QAAQ;OAChB,MAAM;QACLa,OAAO,CAACK,IAAI,CAAC,8BAA8B,EAAElB,QAAQ,CAAC;QACtD,OAAO;UAAEI,IAAI,EAAE,EAAE;UAAEe,IAAI,EAAE,IAAI;UAAElB,KAAK,EAAE;QAAI,CAAE;;IAEhD,CAAC,CAAC,EACFX,UAAU,CAAC8B,KAAK,IAAG;MACjBP,OAAO,CAACO,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAOhC,UAAU,CAACgC,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACH;EAAC;qBAlDU1B,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAA2B,SAAX3B,WAAW;IAAA4B,YAFV;EAAM","names":["HttpHeaders","HttpParams","throwError","of","catchError","map","expand","reduce","DataService","constructor","http","getAllData","getDataPage","pipe","response","links","next","acc","data","pageUrl","url","apiUrl","headers","set","token","params","game","console","log","toString","get","undefined","warn","meta","error","factory","providedIn"],"sourceRoot":"","sources":["E:\\GBrowser\\gbrowser-batlemetrics\\src\\app\\data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable, throwError, of } from 'rxjs';\nimport { catchError, map, expand, reduce } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  private apiUrl = 'https://api.battlemetrics.com/servers';\n  private game = 'rust';\n  private token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6ImJlYWRmMWNmMTNiZmM3NmYiLCJpYXQiOjE3MTc1MjUzNDQsIm5iZiI6MTcxNzUyNTM0NCwiaXNzIjoiaHR0cHM6Ly93d3cuYmF0dGxlbWV0cmljcy5jb20iLCJzdWIiOiJ1cm46dXNlcjo4NjgxMDgifQ.2pYP4c7L8AZO5y9-ZrCQK1CwqqoWTdCkusJduZbLFOg';\n\n  constructor(private http: HttpClient) {}\n\n  getAllData(): Observable<any[]> {\n    return this.getDataPage().pipe(\n      expand(response => response.links?.next ? this.getDataPage(response.links.next) : of(null)),\n      reduce((acc, response) => {\n        if (response && response.data) {\n          return [...acc, ...response.data];\n        }\n        return acc;\n      }, [])\n    );\n  }\n\n  private getDataPage(pageUrl?: string): Observable<any> {\n    const url = pageUrl || this.apiUrl;\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.token}`);\n    let params = new HttpParams()\n      .set('filter[game]', this.game)\n      .set('page[size]', '100');\n\n    if (!pageUrl) {\n      // Only set these params for the initial request\n      params = params.set('sort', 'rank');\n      params = params.set('include', 'serverGroup');\n    }\n\n    console.log('Request URL:', url);\n    console.log('Request Params:', params.toString());\n\n    return this.http.get<any>(url, { headers, params: pageUrl ? undefined : params }).pipe(\n      map(response => {\n        console.log('API Response:', response);\n        if (response && response.data) {\n          return response;\n        } else {\n          console.warn('Empty or malformed response:', response);\n          return { data: [], meta: null, links: null };\n        }\n      }),\n      catchError(error => {\n        console.error('Error fetching data:', error);\n        return throwError(error);\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}