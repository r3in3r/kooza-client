{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://api.battlemetrics.com/servers';\n    this.game = 'rust';\n    this.token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6ImJlYWRmMWNmMTNiZmM3NmYiLCJpYXQiOjE3MTc1MjUzNDQsIm5iZiI6MTcxNzUyNTM0NCwiaXNzIjoiaHR0cHM6Ly93d3cuYmF0dGxlbWV0cmljcy5jb20iLCJzdWIiOiJ1cm46dXNlcjo4NjgxMDgifQ.2pYP4c7L8AZO5y9-ZrCQK1CwqqoWTdCkusJduZbLFOg';\n  }\n  getData(page = 1) {\n    const params = new URLSearchParams({\n      \"filter[game]\": this.game,\n      \"filter[status]\": \"online\",\n      \"sort\": \"-players\",\n      \"page[size]\": \"100\",\n      \"page[number]\": page.toString(),\n      \"fields[server]\": \"name, ip, players, maxPlayers, details\"\n    }).toString();\n    const url = `${this.apiUrl}?${params}`;\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.token}`);\n    return this.http.get(url, {\n      headers\n    }).pipe(map(response => {\n      console.log('API Response:', response); // Log the response for debugging\n      if (response && response.data) {\n        return response.data;\n      } else {\n        console.warn('Empty or malformed response:', response);\n        return [];\n      }\n    }), catchError(error => {\n      console.error('Error fetching data:', error);\n      return throwError(error);\n    }));\n  }\n  static #_ = this.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;AAKhD,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJhB,WAAM,GAAG,uCAAuC;IAChD,SAAI,GAAG,MAAM;IACb,UAAK,GAAG,yPAAyP;EAElO;EAEvCC,OAAO,CAACC,OAAe,CAAC;IACtB,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC;MACjC,cAAc,EAAE,IAAI,CAACC,IAAI;MACzB,gBAAgB,EAAE,QAAQ;MAC1B,MAAM,EAAE,UAAU;MAClB,YAAY,EAAE,KAAK;MACnB,cAAc,EAAEH,IAAI,CAACI,QAAQ,EAAE;MAC/B,gBAAgB,EAAE;KACnB,CAAC,CAACA,QAAQ,EAAE;IAEb,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACC,MAAM,IAAIL,MAAM,EAAE;IACtC,MAAMM,OAAO,GAAG,IAAIf,WAAW,EAAE,CAACgB,GAAG,CAAC,eAAe,EAAE,UAAU,IAAI,CAACC,KAAK,EAAE,CAAC;IAE9E,OAAO,IAAI,CAACX,IAAI,CAACY,GAAG,CAAML,GAAG,EAAE;MAAEE;IAAO,CAAE,CAAC,CAACI,IAAI,CAC9ChB,GAAG,CAACiB,QAAQ,IAAG;MACbC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,QAAQ,CAAC,CAAC,CAAC;MACxC,IAAIA,QAAQ,IAAIA,QAAQ,CAACG,IAAI,EAAE;QAC7B,OAAOH,QAAQ,CAACG,IAAI;OACrB,MAAM;QACLF,OAAO,CAACG,IAAI,CAAC,8BAA8B,EAAEJ,QAAQ,CAAC;QACtD,OAAO,EAAE;;IAEb,CAAC,CAAC,EACFlB,UAAU,CAACuB,KAAK,IAAG;MACjBJ,OAAO,CAACI,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAOxB,UAAU,CAACwB,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACH;EAAC;qBAnCUrB,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAsB,SAAXtB,WAAW;IAAAuB,YAFV;EAAM","names":["HttpHeaders","throwError","catchError","map","DataService","constructor","http","getData","page","params","URLSearchParams","game","toString","url","apiUrl","headers","set","token","get","pipe","response","console","log","data","warn","error","factory","providedIn"],"sourceRoot":"","sources":["E:\\GBrowser\\kooza-client-batlemetrics\\src\\app\\data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  private apiUrl = 'https://api.battlemetrics.com/servers';\n  private game = 'rust';\n  private token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6ImJlYWRmMWNmMTNiZmM3NmYiLCJpYXQiOjE3MTc1MjUzNDQsIm5iZiI6MTcxNzUyNTM0NCwiaXNzIjoiaHR0cHM6Ly93d3cuYmF0dGxlbWV0cmljcy5jb20iLCJzdWIiOiJ1cm46dXNlcjo4NjgxMDgifQ.2pYP4c7L8AZO5y9-ZrCQK1CwqqoWTdCkusJduZbLFOg';\n\n  constructor(private http: HttpClient) {}\n\n  getData(page: number = 1): Observable<any[]> {\n    const params = new URLSearchParams({\n      \"filter[game]\": this.game,\n      \"filter[status]\": \"online\",\n      \"sort\": \"-players\",\n      \"page[size]\": \"100\",\n      \"page[number]\": page.toString(),\n      \"fields[server]\": \"name, ip, players, maxPlayers, details\"\n    }).toString();\n\n    const url = `${this.apiUrl}?${params}`;\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.token}`);\n\n    return this.http.get<any>(url, { headers }).pipe(\n      map(response => {\n        console.log('API Response:', response); // Log the response for debugging\n        if (response && response.data) {\n          return response.data;\n        } else {\n          console.warn('Empty or malformed response:', response);\n          return [];\n        }\n      }),\n      catchError(error => {\n        console.error('Error fetching data:', error);\n        return throwError(error);\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}