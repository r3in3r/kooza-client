{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet RetailersComponent = class RetailersComponent {\n  constructor(dataService) {\n    this.dataService = dataService;\n    this.data = [];\n    this.displayedData = [];\n    this.currentPage = 1;\n    this.itemsPerPage = 100;\n  }\n  ngOnInit() {\n    this.dataService.getData().subscribe(response => {\n      console.log('Response from data service:', response);\n      if (response.length === 0) {\n        console.warn('The response is empty.');\n      }\n      this.data = response.map(server => ({\n        name: server.attributes.name,\n        players: server.attributes.players,\n        ip: server.attributes.ip,\n        port: server.attributes.port,\n        map: server.attributes.details.map,\n        appId: server.attributes.details.appId,\n        country: server.attributes.country.toLowerCase(),\n        status: server.attributes.status\n      }));\n      console.log('Processed data:', this.data);\n      this.updateDisplayedData();\n    }, error => {\n      console.error('Error fetching data:', error);\n    });\n  }\n  updateDisplayedData() {\n    const startIndex = (this.currentPage - 1) * this.itemsPerPage;\n    const endIndex = startIndex + this.itemsPerPage;\n    this.displayedData = this.data.slice(startIndex, endIndex);\n    console.log('Displayed data:', this.displayedData);\n  }\n  nextPage() {\n    if (this.currentPage < this.getTotalPages()) {\n      this.currentPage++;\n      this.updateDisplayedData();\n    }\n  }\n  previousPage() {\n    if (this.currentPage > 1) {\n      this.currentPage--;\n      this.updateDisplayedData();\n    }\n  }\n  getTotalPages() {\n    return Math.ceil(this.data.length / this.itemsPerPage);\n  }\n  joinServer(ip, port, appId) {\n    const steamConnectUrl = `steam://connect/${ip}:${port}/${appId}`;\n    window.location.href = steamConnectUrl;\n  }\n};\nRetailersComponent = __decorate([Component({\n  selector: 'app-retailers',\n  templateUrl: './retailers.component.html',\n  styleUrls: ['./retailers.component.scss']\n})], RetailersComponent);\nexport { RetailersComponent };","map":{"version":3,"mappings":"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","names":["Component","RetailersComponent","constructor","dataService","ngOnInit","getData","subscribe","response","console","log","length","warn","data","map","server","name","attributes","players","ip","port","details","appId","country","toLowerCase","status","updateDisplayedData","error","startIndex","currentPage","itemsPerPage","endIndex","displayedData","slice","nextPage","getTotalPages","previousPage","Math","ceil","joinServer","steamConnectUrl","window","location","href","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["F:\\Stuff\\TeamAkili\\kooza-client Orginal\\src\\app\\servers\\servers.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { DataService } from '../data.service';\n\n@Component({\n  selector: 'app-retailers',\n  templateUrl: './retailers.component.html',\n  styleUrls: ['./retailers.component.scss']\n})\nexport class RetailersComponent implements OnInit {\n  data: any[] = [];\n  displayedData: any[] = [];\n  currentPage: number = 1;\n  itemsPerPage: number = 100;\n\n  constructor(private dataService: DataService) {}\n\n  ngOnInit() {\n    this.dataService.getData().subscribe(\n      response => {\n        console.log('Response from data service:', response);\n        if (response.length === 0) {\n          console.warn('The response is empty.');\n        }\n        this.data = response.map((server: any) => ({\n          name: server.attributes.name,\n          players: server.attributes.players,\n          ip: server.attributes.ip,\n          port: server.attributes.port,\n          map: server.attributes.details.map,\n          appId: server.attributes.details.appId,\n          country: server.attributes.country.toLowerCase(), // Ensure country code is lowercase\n          status: server.attributes.status\n        }));\n        console.log('Processed data:', this.data);\n        this.updateDisplayedData();\n      },\n      error => {\n        console.error('Error fetching data:', error);\n      }\n    );\n  }\n\n  updateDisplayedData() {\n    const startIndex = (this.currentPage - 1) * this.itemsPerPage;\n    const endIndex = startIndex + this.itemsPerPage;\n    this.displayedData = this.data.slice(startIndex, endIndex);\n    console.log('Displayed data:', this.displayedData);\n  }\n\n  nextPage() {\n    if (this.currentPage < this.getTotalPages()) {\n      this.currentPage++;\n      this.updateDisplayedData();\n    }\n  }\n\n  previousPage() {\n    if (this.currentPage > 1) {\n      this.currentPage--;\n      this.updateDisplayedData();\n    }\n  }\n\n  getTotalPages() {\n    return Math.ceil(this.data.length / this.itemsPerPage);\n  }\n\n  joinServer(ip: string, port: number, appId: number): void {\n    const steamConnectUrl = `steam://connect/${ip}:${port}/${appId}`;\n    window.location.href = steamConnectUrl;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}