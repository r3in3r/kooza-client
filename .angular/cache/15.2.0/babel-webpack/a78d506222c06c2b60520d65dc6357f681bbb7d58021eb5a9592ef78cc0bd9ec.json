{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError, of } from 'rxjs';\nimport { catchError, map, toArray, expand } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://api.battlemetrics.com/servers';\n    this.game = 'rust';\n    this.token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6ImJlYWRmMWNmMTNiZmM3NmYiLCJpYXQiOjE3MTc1MjUzNDQsIm5iZiI6MTcxNzUyNTM0NCwiaXNzIjoiaHR0cHM6Ly93d3cuYmF0dGxlbWV0cmljcy5jb20iLCJzdWIiOiJ1cm46dXNlcjo4NjgxMDgifQ.2pYP4c7L8AZO5y9-ZrCQK1CwqqoWTdCkusJduZbLFOg';\n  }\n  getData() {\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.token}`);\n    return this.fetchPage(1, headers).pipe(expand(response => {\n      if (response.links && response.links.next) {\n        const nextPageUrl = response.links.next;\n        return this.http.get(nextPageUrl, {\n          headers\n        });\n      } else {\n        return of(null);\n      }\n    }), takeWhile(response => response !== null), map(response => response.data), toArray(), map(pages => pages.flat()), catchError(error => {\n      console.error('Error fetching data:', error);\n      return throwError(error);\n    }));\n  }\n  fetchPage(page, headers) {\n    const url = `${this.apiUrl}?filter[game]=${encodeURIComponent(this.game)}&page[size]=100&page[number]=${page}`;\n    console.log('Request URL:', url); // Log the request URL for debugging\n    return this.http.get(url, {\n      headers\n    }).pipe(map(response => {\n      console.log('API Response:', response); // Log the response for debugging\n      if (response && response.data) {\n        return response;\n      } else {\n        console.warn('Empty or malformed response:', response);\n        return {\n          data: []\n        };\n      }\n    }), catchError(error => {\n      console.error('Error fetching page data:', error);\n      return throwError(error);\n    }));\n  }\n  static #_ = this.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAAqBC,UAAU,EAAEC,EAAE,QAAQ,MAAM;AACjD,SAASC,UAAU,EAAEC,GAAG,EAAYC,OAAO,EAAEC,MAAM,QAAQ,gBAAgB;;;AAK3E,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJhB,WAAM,GAAG,uCAAuC;IAChD,SAAI,GAAG,MAAM;IACb,UAAK,GAAG,yPAAyP;EAElO;EAEvCC,OAAO;IACL,MAAMC,OAAO,GAAG,IAAIX,WAAW,EAAE,CAACY,GAAG,CAAC,eAAe,EAAE,UAAU,IAAI,CAACC,KAAK,EAAE,CAAC;IAE9E,OAAO,IAAI,CAACC,SAAS,CAAC,CAAC,EAAEH,OAAO,CAAC,CAACI,IAAI,CACpCT,MAAM,CAACU,QAAQ,IAAG;MAChB,IAAIA,QAAQ,CAACC,KAAK,IAAID,QAAQ,CAACC,KAAK,CAACC,IAAI,EAAE;QACzC,MAAMC,WAAW,GAAGH,QAAQ,CAACC,KAAK,CAACC,IAAI;QACvC,OAAO,IAAI,CAACT,IAAI,CAACW,GAAG,CAAMD,WAAW,EAAE;UAAER;QAAO,CAAE,CAAC;OACpD,MAAM;QACL,OAAOT,EAAE,CAAC,IAAI,CAAC;;IAEnB,CAAC,CAAC,EACFmB,SAAS,CAACL,QAAQ,IAAIA,QAAQ,KAAK,IAAI,CAAC,EACxCZ,GAAG,CAACY,QAAQ,IAAIA,QAAQ,CAACM,IAAI,CAAC,EAC9BjB,OAAO,EAAE,EACTD,GAAG,CAACmB,KAAK,IAAIA,KAAK,CAACC,IAAI,EAAE,CAAC,EAC1BrB,UAAU,CAACsB,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAOxB,UAAU,CAACwB,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACH;EAEQX,SAAS,CAACa,IAAY,EAAEhB,OAAoB;IAClD,MAAMiB,GAAG,GAAG,GAAG,IAAI,CAACC,MAAM,iBAAiBC,kBAAkB,CAAC,IAAI,CAACC,IAAI,CAAC,gCAAgCJ,IAAI,EAAE;IAC9GD,OAAO,CAACM,GAAG,CAAC,cAAc,EAAEJ,GAAG,CAAC,CAAC,CAAC;IAElC,OAAO,IAAI,CAACnB,IAAI,CAACW,GAAG,CAAMQ,GAAG,EAAE;MAAEjB;IAAO,CAAE,CAAC,CAACI,IAAI,CAC9CX,GAAG,CAACY,QAAQ,IAAG;MACbU,OAAO,CAACM,GAAG,CAAC,eAAe,EAAEhB,QAAQ,CAAC,CAAC,CAAC;MACxC,IAAIA,QAAQ,IAAIA,QAAQ,CAACM,IAAI,EAAE;QAC7B,OAAON,QAAQ;OAChB,MAAM;QACLU,OAAO,CAACO,IAAI,CAAC,8BAA8B,EAAEjB,QAAQ,CAAC;QACtD,OAAO;UAAEM,IAAI,EAAE;QAAE,CAAE;;IAEvB,CAAC,CAAC,EACFnB,UAAU,CAACsB,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,OAAOxB,UAAU,CAACwB,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACH;EAAC;qBAjDUlB,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAA2B,SAAX3B,WAAW;IAAA4B,YAFV;EAAM","names":["HttpHeaders","throwError","of","catchError","map","toArray","expand","DataService","constructor","http","getData","headers","set","token","fetchPage","pipe","response","links","next","nextPageUrl","get","takeWhile","data","pages","flat","error","console","page","url","apiUrl","encodeURIComponent","game","log","warn","factory","providedIn"],"sourceRoot":"","sources":["E:\\GBrowser\\gbrowser-batlemetrics\\src\\app\\data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError, of } from 'rxjs';\nimport { catchError, map, mergeMap, toArray, expand } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  private apiUrl = 'https://api.battlemetrics.com/servers';\n  private game = 'rust';\n  private token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6ImJlYWRmMWNmMTNiZmM3NmYiLCJpYXQiOjE3MTc1MjUzNDQsIm5iZiI6MTcxNzUyNTM0NCwiaXNzIjoiaHR0cHM6Ly93d3cuYmF0dGxlbWV0cmljcy5jb20iLCJzdWIiOiJ1cm46dXNlcjo4NjgxMDgifQ.2pYP4c7L8AZO5y9-ZrCQK1CwqqoWTdCkusJduZbLFOg';\n\n  constructor(private http: HttpClient) {}\n\n  getData(): Observable<any[]> {\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.token}`);\n\n    return this.fetchPage(1, headers).pipe(\n      expand(response => {\n        if (response.links && response.links.next) {\n          const nextPageUrl = response.links.next;\n          return this.http.get<any>(nextPageUrl, { headers });\n        } else {\n          return of(null);\n        }\n      }),\n      takeWhile(response => response !== null),\n      map(response => response.data),\n      toArray(),\n      map(pages => pages.flat()),\n      catchError(error => {\n        console.error('Error fetching data:', error);\n        return throwError(error);\n      })\n    );\n  }\n\n  private fetchPage(page: number, headers: HttpHeaders): Observable<any> {\n    const url = `${this.apiUrl}?filter[game]=${encodeURIComponent(this.game)}&page[size]=100&page[number]=${page}`;\n    console.log('Request URL:', url); // Log the request URL for debugging\n\n    return this.http.get<any>(url, { headers }).pipe(\n      map(response => {\n        console.log('API Response:', response); // Log the response for debugging\n        if (response && response.data) {\n          return response;\n        } else {\n          console.warn('Empty or malformed response:', response);\n          return { data: [] };\n        }\n      }),\n      catchError(error => {\n        console.error('Error fetching page data:', error);\n        return throwError(error);\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}