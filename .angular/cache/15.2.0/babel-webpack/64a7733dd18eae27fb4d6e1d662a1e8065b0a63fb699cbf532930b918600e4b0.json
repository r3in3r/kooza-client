{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://api.battlemetrics.com/servers';\n    this.game = 'rust';\n    this.token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6ImJlYWRmMWNmMTNiZmM3NmYiLCJpYXQiOjE3MTc1MjUzNDQsIm5iZiI6MTcxNzUyNTM0NCwiaXNzIjoiaHR0cHM6Ly93d3cuYmF0dGxlbWV0cmljcy5jb20iLCJzdWIiOiJ1cm46dXNlcjo4NjgxMDgifQ.2pYP4c7L8AZO5y9-ZrCQK1CwqqoWTdCkusJduZbLFOg'; // Replace with your actual token\n  }\n\n  getServers(page) {\n    const url = `${this.apiUrl}?filter[game]=${encodeURIComponent(this.game)}&page[size]=100&page[number]=${page}`;\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.token}`);\n    console.log('Request URL:', url); // Log the request URL for debugging\n    return this.http.get(url, {\n      headers\n    }).pipe(map(response => {\n      console.log('API Response:', response); // Log the response for debugging\n      if (response && response.data) {\n        return response.data.map(server => ({\n          id: server.id,\n          name: server.attributes.name,\n          players: server.attributes.players,\n          ip: server.attributes.ip,\n          port: server.attributes.port,\n          map: server.attributes.details.map,\n          appId: server.attributes.details.appId,\n          country: server.attributes.country.toLowerCase(),\n          status: server.attributes.status\n        }));\n      } else {\n        console.warn('Empty or malformed response:', response);\n        return [];\n      }\n    }), catchError(error => {\n      console.error('Error fetching data:', error);\n      return throwError(error);\n    }));\n  }\n  static #_ = this.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;AAKhD,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJhB,WAAM,GAAG,uCAAuC;IAChD,SAAI,GAAG,MAAM;IACb,UAAK,GAAG,yPAAyP,CAAC,CAAC;EAEpO;;EAEvCC,UAAU,CAACC,IAAY;IACrB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACC,MAAM,iBAAiBC,kBAAkB,CAAC,IAAI,CAACC,IAAI,CAAC,gCAAgCJ,IAAI,EAAE;IAC9G,MAAMK,OAAO,GAAG,IAAIb,WAAW,EAAE,CAACc,GAAG,CAAC,eAAe,EAAE,UAAU,IAAI,CAACC,KAAK,EAAE,CAAC;IAE9EC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAER,GAAG,CAAC,CAAC,CAAC;IAElC,OAAO,IAAI,CAACH,IAAI,CAACY,GAAG,CAAMT,GAAG,EAAE;MAAEI;IAAO,CAAE,CAAC,CAACM,IAAI,CAC9ChB,GAAG,CAACiB,QAAQ,IAAG;MACbJ,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEG,QAAQ,CAAC,CAAC,CAAC;MACxC,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE;QAC7B,OAAOD,QAAQ,CAACC,IAAI,CAAClB,GAAG,CAAEmB,MAAW,KAAM;UACzCC,EAAE,EAAED,MAAM,CAACC,EAAE;UACbC,IAAI,EAAEF,MAAM,CAACG,UAAU,CAACD,IAAI;UAC5BE,OAAO,EAAEJ,MAAM,CAACG,UAAU,CAACC,OAAO;UAClCC,EAAE,EAAEL,MAAM,CAACG,UAAU,CAACE,EAAE;UACxBC,IAAI,EAAEN,MAAM,CAACG,UAAU,CAACG,IAAI;UAC5BzB,GAAG,EAAEmB,MAAM,CAACG,UAAU,CAACI,OAAO,CAAC1B,GAAG;UAClC2B,KAAK,EAAER,MAAM,CAACG,UAAU,CAACI,OAAO,CAACC,KAAK;UACtCC,OAAO,EAAET,MAAM,CAACG,UAAU,CAACM,OAAO,CAACC,WAAW,EAAE;UAChDC,MAAM,EAAEX,MAAM,CAACG,UAAU,CAACQ;SAC3B,CAAC,CAAC;OACJ,MAAM;QACLjB,OAAO,CAACkB,IAAI,CAAC,8BAA8B,EAAEd,QAAQ,CAAC;QACtD,OAAO,EAAE;;IAEb,CAAC,CAAC,EACFlB,UAAU,CAACiC,KAAK,IAAG;MACjBnB,OAAO,CAACmB,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAOlC,UAAU,CAACkC,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACH;EAAC;qBAtCU/B,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAgC,SAAXhC,WAAW;IAAAiC,YAFV;EAAM","names":["HttpHeaders","throwError","catchError","map","DataService","constructor","http","getServers","page","url","apiUrl","encodeURIComponent","game","headers","set","token","console","log","get","pipe","response","data","server","id","name","attributes","players","ip","port","details","appId","country","toLowerCase","status","warn","error","factory","providedIn"],"sourceRoot":"","sources":["E:\\GBrowser\\kooza-client-batlemetrics\\src\\app\\data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  private apiUrl = 'https://api.battlemetrics.com/servers';\n  private game = 'rust';\n  private token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6ImJlYWRmMWNmMTNiZmM3NmYiLCJpYXQiOjE3MTc1MjUzNDQsIm5iZiI6MTcxNzUyNTM0NCwiaXNzIjoiaHR0cHM6Ly93d3cuYmF0dGxlbWV0cmljcy5jb20iLCJzdWIiOiJ1cm46dXNlcjo4NjgxMDgifQ.2pYP4c7L8AZO5y9-ZrCQK1CwqqoWTdCkusJduZbLFOg'; // Replace with your actual token\n\n  constructor(private http: HttpClient) {}\n\n  getServers(page: number): Observable<any[]> {\n    const url = `${this.apiUrl}?filter[game]=${encodeURIComponent(this.game)}&page[size]=100&page[number]=${page}`;\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.token}`);\n\n    console.log('Request URL:', url); // Log the request URL for debugging\n\n    return this.http.get<any>(url, { headers }).pipe(\n      map(response => {\n        console.log('API Response:', response); // Log the response for debugging\n        if (response && response.data) {\n          return response.data.map((server: any) => ({\n            id: server.id,\n            name: server.attributes.name,\n            players: server.attributes.players,\n            ip: server.attributes.ip,\n            port: server.attributes.port,\n            map: server.attributes.details.map,\n            appId: server.attributes.details.appId,\n            country: server.attributes.country.toLowerCase(), // Ensure country code is lowercase\n            status: server.attributes.status\n          }));\n        } else {\n          console.warn('Empty or malformed response:', response);\n          return [];\n        }\n      }),\n      catchError(error => {\n        console.error('Error fetching data:', error);\n        return throwError(error);\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}