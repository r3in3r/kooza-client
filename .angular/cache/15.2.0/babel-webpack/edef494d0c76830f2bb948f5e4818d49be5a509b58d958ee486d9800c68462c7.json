{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://api.battlemetrics.com/servers?filter[game]=palworld&page[size]=100';\n    this.token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6ImJlYWRmMWNmMTNiZmM3NmYiLCJpYXQiOjE3MTc1MjUzNDQsIm5iZiI6MTcxNzUyNTM0NCwiaXNzIjoiaHR0cHM6Ly93d3cuYmF0dGxlbWV0cmljcy5jb20iLCJzdWIiOiJ1cm46dXNlcjo4NjgxMDgifQ.2pYP4c7L8AZO5y9-ZrCQK1CwqqoWTdCkusJduZbLFOg';\n  }\n  getData() {\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${this.token}`\n    });\n    return this.http.get(this.apiUrl, {\n      headers\n    }).pipe(map(response => {\n      console.log('API response:', response);\n      if (response && response.data) {\n        return response.data;\n      } else {\n        console.warn('Empty or malformed response:', response);\n        return [];\n      }\n    }), catchError(error => {\n      console.error('Error fetching data:', error);\n      return throwError(error);\n    }));\n  }\n  static #_ = this.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;AAKhD,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHhB,WAAM,GAAG,4EAA4E;IACrF,UAAK,GAAG,yPAAyP;EAElO;EAEvCC,OAAO;IACL,MAAMC,OAAO,GAAG,IAAIR,WAAW,CAAC;MAC9B,eAAe,EAAE,UAAU,IAAI,CAACS,KAAK;KACtC,CAAC;IAEF,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAC,IAAI,CAACC,MAAM,EAAE;MAAEH;IAAO,CAAE,CAAC,CAACI,IAAI,CACjDT,GAAG,CAAEU,QAAa,IAAI;MACpBC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,QAAQ,CAAC;MACtC,IAAIA,QAAQ,IAAIA,QAAQ,CAACG,IAAI,EAAE;QAC7B,OAAOH,QAAQ,CAACG,IAAI;OACrB,MAAM;QACLF,OAAO,CAACG,IAAI,CAAC,8BAA8B,EAAEJ,QAAQ,CAAC;QACtD,OAAO,EAAE;;IAEb,CAAC,CAAC,EACFX,UAAU,CAACgB,KAAK,IAAG;MACjBJ,OAAO,CAACI,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAOjB,UAAU,CAACiB,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACH;EAAC;qBA1BUd,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAe,SAAXf,WAAW;IAAAgB,YAFV;EAAM","names":["HttpHeaders","throwError","catchError","map","DataService","constructor","http","getData","headers","token","get","apiUrl","pipe","response","console","log","data","warn","error","factory","providedIn"],"sourceRoot":"","sources":["F:\\Stuff\\TeamAkili\\kooza-client\\src\\app\\data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  private apiUrl = 'https://api.battlemetrics.com/servers?filter[game]=palworld&page[size]=100';\n  private token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6ImJlYWRmMWNmMTNiZmM3NmYiLCJpYXQiOjE3MTc1MjUzNDQsIm5iZiI6MTcxNzUyNTM0NCwiaXNzIjoiaHR0cHM6Ly93d3cuYmF0dGxlbWV0cmljcy5jb20iLCJzdWIiOiJ1cm46dXNlcjo4NjgxMDgifQ.2pYP4c7L8AZO5y9-ZrCQK1CwqqoWTdCkusJduZbLFOg';\n\n  constructor(private http: HttpClient) {}\n\n  getData(): Observable<any> {\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${this.token}`\n    });\n\n    return this.http.get(this.apiUrl, { headers }).pipe(\n      map((response: any) => {\n        console.log('API response:', response);\n        if (response && response.data) {\n          return response.data;\n        } else {\n          console.warn('Empty or malformed response:', response);\n          return [];\n        }\n      }),\n      catchError(error => {\n        console.error('Error fetching data:', error);\n        return throwError(error);\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}