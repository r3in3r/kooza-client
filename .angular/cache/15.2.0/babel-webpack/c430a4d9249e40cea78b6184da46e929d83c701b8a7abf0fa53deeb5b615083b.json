{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://api.battlemetrics.com/servers';\n    this.game = 'rust';\n    this.token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6ImJlYWRmMWNmMTNiZmM3NmYiLCJpYXQiOjE3MTc1MjUzNDQsIm5iZiI6MTcxNzUyNTM0NCwiaXNzIjoiaHR0cHM6Ly93d3cuYmF0dGxlbWV0cmljcy5jb20iLCJzdWIiOiJ1cm46dXNlcjo4NjgxMDgifQ.2pYP4c7L8AZO5y9-ZrCQK1CwqqoWTdCkusJduZbLFOg';\n  }\n  getData(page = 1, pageSize = 100) {\n    const url = `${this.apiUrl}`;\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.token}`);\n    let params = new HttpParams().set('filter[game]', this.game).set('page[size]', pageSize.toString()).set('page[number]', page.toString());\n    console.log('Request URL:', url);\n    console.log('Request Params:', params.toString());\n    return this.http.get(url, {\n      headers,\n      params\n    }).pipe(map(response => {\n      console.log('API Response:', response);\n      if (response && response.data) {\n        return {\n          data: response.data,\n          meta: response.meta\n        };\n      } else {\n        console.warn('Empty or malformed response:', response);\n        return {\n          data: [],\n          meta: null\n        };\n      }\n    }), catchError(error => {\n      console.error('Error fetching data:', error);\n      return throwError(error);\n    }));\n  }\n  static #_ = this.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,EAAEC,UAAU,QAAQ,sBAAsB;AAC1E,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;AAKhD,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJhB,WAAM,GAAG,uCAAuC;IAChD,SAAI,GAAG,MAAM;IACb,UAAK,GAAG,yPAAyP;EAElO;EAEvCC,OAAO,CAACC,OAAe,CAAC,EAAEC,WAAmB,GAAG;IAC9C,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACC,MAAM,EAAE;IAC5B,MAAMC,OAAO,GAAG,IAAIb,WAAW,EAAE,CAACc,GAAG,CAAC,eAAe,EAAE,UAAU,IAAI,CAACC,KAAK,EAAE,CAAC;IAC9E,IAAIC,MAAM,GAAG,IAAIf,UAAU,EAAE,CAC1Ba,GAAG,CAAC,cAAc,EAAE,IAAI,CAACG,IAAI,CAAC,CAC9BH,GAAG,CAAC,YAAY,EAAEJ,QAAQ,CAACQ,QAAQ,EAAE,CAAC,CACtCJ,GAAG,CAAC,cAAc,EAAEL,IAAI,CAACS,QAAQ,EAAE,CAAC;IAEvCC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAET,GAAG,CAAC;IAChCQ,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEJ,MAAM,CAACE,QAAQ,EAAE,CAAC;IAEjD,OAAO,IAAI,CAACX,IAAI,CAACc,GAAG,CAAMV,GAAG,EAAE;MAAEE,OAAO;MAAEG;IAAM,CAAE,CAAC,CAACM,IAAI,CACtDlB,GAAG,CAACmB,QAAQ,IAAG;MACbJ,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEG,QAAQ,CAAC;MACtC,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE;QAC7B,OAAO;UACLA,IAAI,EAAED,QAAQ,CAACC,IAAI;UACnBC,IAAI,EAAEF,QAAQ,CAACE;SAChB;OACF,MAAM;QACLN,OAAO,CAACO,IAAI,CAAC,8BAA8B,EAAEH,QAAQ,CAAC;QACtD,OAAO;UAAEC,IAAI,EAAE,EAAE;UAAEC,IAAI,EAAE;QAAI,CAAE;;IAEnC,CAAC,CAAC,EACFtB,UAAU,CAACwB,KAAK,IAAG;MACjBR,OAAO,CAACQ,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAOzB,UAAU,CAACyB,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACH;EAAC;qBApCUtB,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAuB,SAAXvB,WAAW;IAAAwB,YAFV;EAAM","names":["HttpHeaders","HttpParams","throwError","catchError","map","DataService","constructor","http","getData","page","pageSize","url","apiUrl","headers","set","token","params","game","toString","console","log","get","pipe","response","data","meta","warn","error","factory","providedIn"],"sourceRoot":"","sources":["E:\\GBrowser\\gbrowser-batlemetrics\\src\\app\\data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  private apiUrl = 'https://api.battlemetrics.com/servers';\n  private game = 'rust';\n  private token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6ImJlYWRmMWNmMTNiZmM3NmYiLCJpYXQiOjE3MTc1MjUzNDQsIm5iZiI6MTcxNzUyNTM0NCwiaXNzIjoiaHR0cHM6Ly93d3cuYmF0dGxlbWV0cmljcy5jb20iLCJzdWIiOiJ1cm46dXNlcjo4NjgxMDgifQ.2pYP4c7L8AZO5y9-ZrCQK1CwqqoWTdCkusJduZbLFOg';\n\n  constructor(private http: HttpClient) {}\n\n  getData(page: number = 1, pageSize: number = 100): Observable<any> {\n    const url = `${this.apiUrl}`;\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.token}`);\n    let params = new HttpParams()\n      .set('filter[game]', this.game)\n      .set('page[size]', pageSize.toString())\n      .set('page[number]', page.toString());\n\n    console.log('Request URL:', url);\n    console.log('Request Params:', params.toString());\n\n    return this.http.get<any>(url, { headers, params }).pipe(\n      map(response => {\n        console.log('API Response:', response);\n        if (response && response.data) {\n          return {\n            data: response.data,\n            meta: response.meta\n          };\n        } else {\n          console.warn('Empty or malformed response:', response);\n          return { data: [], meta: null };\n        }\n      }),\n      catchError(error => {\n        console.error('Error fetching data:', error);\n        return throwError(error);\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}